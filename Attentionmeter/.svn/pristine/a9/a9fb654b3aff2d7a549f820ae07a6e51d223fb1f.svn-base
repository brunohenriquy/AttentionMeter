package org.attentionmeter.facedetect;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Enumeration;

import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.app.Activity;
import android.app.Service;
import android.content.Intent;
import android.util.Log;
import android.widget.TextView;

public class Server extends Service {
	
	public static final String TAG = "MyServiceTag";

	TextView info, infoip, msg;
	String message = "";
	ServerSocket serverSocket;
	
    public static final String BROADCAST_ACTION = "com.websmithing.broadcasttest.displayevent";
    private final Handler handler = new Handler();
    Intent intent;
	
	@Override
    public void onCreate() {
        super.onCreate();
        intent = new Intent(BROADCAST_ACTION);
        //s = new Socket();
    }


    public void onStart(Intent intent, int startId){
        super.onStart(intent, startId);
        //Toast.makeText(this,"Service created ...", Toast.LENGTH_LONG).show();
        //Runnable connect = new connectSocket();
        //new Thread(connect).start();
        
        handler.removeCallbacks(sendUpdatesToUI);
        handler.postDelayed(sendUpdatesToUI, 1000); // 1 second 
        
        Thread socketServerThread = new Thread(new SocketServerThread());
		socketServerThread.start();
    }
    
    private Runnable sendUpdatesToUI = new Runnable() {
        public void run() {
            DisplayLoggingInfo();            
            //handler.postDelayed(this, 5000); // 5 seconds
        }
    };
    
    private void DisplayLoggingInfo() {
        Log.d(TAG, "entered DisplayLoggingInfo");
 
        if (message != ""){
	        String[] separated = message.split("-");
	        intent.putExtra("ECG", separated[0]);
	        intent.putExtra("GSR", separated[1]);
	        intent.putExtra("EEG", separated[2]);
	        intent.putExtra("EMG", separated[3]);
        }
        intent.putExtra("IP", getIpAddress() + ":" + serverSocket.getLocalPort());
        sendBroadcast(intent);
    }

	/*@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		info = (TextView) findViewById(R.id.info);
		infoip = (TextView) findViewById(R.id.infoip);
		msg = (TextView) findViewById(R.id.msg);
		
		infoip.setText(getIpAddress());

		Thread socketServerThread = new Thread(new SocketServerThread());
		socketServerThread.start();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();

		if (serverSocket != null) {
			try {
				serverSocket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}*/

	public class SocketServerThread extends Thread {

		static final int SocketServerPORT = 8080;
		int count = 0;

		@Override
		public void run() {
			try {
				serverSocket = new ServerSocket(SocketServerPORT);
				/*Server.this.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						info.setText("I'm waiting here: "
								+ serverSocket.getLocalPort());
					}
				});*/

				while (true) {
					Socket socket = serverSocket.accept();


					/*Server.this.runOnUiThread(new Runnable() {

						@Override
						public void run() {
							msg.setText(message);
						}
					});*/
					
					ByteArrayOutputStream byteArrayOutputStream = 
			                new ByteArrayOutputStream(1024);
					byte[] buffer = new byte[1024];
					
					int bytesRead;
					InputStream inputStream = socket.getInputStream();
					
					/*
					 * notice:
					 * inputStream.read() will block if no data return
					 */
		            while ((bytesRead = inputStream.read(buffer)) != -1){
		                byteArrayOutputStream.write(buffer, 0, bytesRead);
		                message = byteArrayOutputStream.toString("UTF-8");
		            }

					/*Server.this.runOnUiThread(new Runnable() {

						@Override
						public void run() {
							msg.setText(message);
						}
					});*/

					/*SocketServerReplyThread socketServerReplyThread = new SocketServerReplyThread(
							socket, count);
					socketServerReplyThread.run();*/

				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private class SocketServerReplyThread extends Thread {

		private Socket hostThreadSocket;
		int cnt;

		SocketServerReplyThread(Socket socket, int c) {
			hostThreadSocket = socket;
			cnt = c;
		}

		@Override
		public void run() {
			OutputStream outputStream;
			String msgReply = "Hello from Android, you are #" + cnt;

			try {
				outputStream = hostThreadSocket.getOutputStream();
	            PrintStream printStream = new PrintStream(outputStream);
	            printStream.print(msgReply);
	            printStream.close();

				message += "replayed: " + msgReply + "\n";

				/*Server.this.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						msg.setText(message);
					}
				});*/

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				message += "Something wrong! " + e.toString() + "\n";
			}

			/*Server.this.runOnUiThread(new Runnable() {

				@Override
				public void run() {
					msg.setText(message);
				}
			});*/
		}

	}

	private String getIpAddress() {
		String ip = "";
		try {
			Enumeration<NetworkInterface> enumNetworkInterfaces = NetworkInterface
					.getNetworkInterfaces();
			while (enumNetworkInterfaces.hasMoreElements()) {
				NetworkInterface networkInterface = enumNetworkInterfaces
						.nextElement();
				Enumeration<InetAddress> enumInetAddress = networkInterface
						.getInetAddresses();
				while (enumInetAddress.hasMoreElements()) {
					InetAddress inetAddress = enumInetAddress.nextElement();

					if (inetAddress.isSiteLocalAddress()) {
						ip += "SiteLocalAddress: " 
								+ inetAddress.getHostAddress();
					}
					
				}

			}

		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			ip += "Something Wrong! " + e.toString() + "\n";
		}

		return ip;
	}
	
	private final IBinder myBinder = new LocalBinder();

	@Override
    public IBinder onBind(Intent arg0) {
        // TODO Auto-generated method stub
        return myBinder;
    }


    public class LocalBinder extends Binder {
        public Server getService() {
            return Server.this;
        }
    }



}
